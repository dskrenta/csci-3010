PE 3
- input parameter - "regular" information that you're giving to the function
- output parameter - passed as a pointer (normally) in c++, the value will be filled in by the function

const
- cannot be changed (constant)
- uses
  - parameters - function can't modify its value
    - void foo(const int & x) { x++; }
  - variables
  - pointers
  - methods - can't modify the object it's called on
    - int Point::get_x() const { x_++; return x_;}

constructors in c++

class Point {
  Point(const int x, const int y) {
    x_ = x;
    y_ = y;
  }

  private:
    int x_;
    int y_;
}

Point p;

Point far(1000, 2000)

- c++ will provide a 0-argument default constructor
- as soon as you add any constructor, the default one goes away

initialization lists
- runs first, is optimized
- body runs second
- prefer initialization when possible because it is faster

Point::Point(const int x, const int y): x_(x), y_(y) {
  // stuff
}

enums
- set of related named constants
- use "class" because it enforces strict mode

enum class Name {
  value1,
  value2
}

enum class Day {
  Monday,
  Tuesday,
  Wednesday,
  Thursday,
  Friday,
  Saturday,
  Sunday
}

Day d1 = Day::Monday;
Day d2 = Day::Tuesday;

void foo(Day d) {
  std::cout << d << std::endl;
}
